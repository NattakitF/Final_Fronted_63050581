const express = require('express');
const mongoose = require('mongoose');

// เชื่อมต่อ MongoDB
mongoose.connect('mongodb://localhost:27017/balance_sheet', { useNewUrlParser: true, useUnifiedTopology: true });
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
  console.log('Connected to MongoDB');
});

const entrySchema = new mongoose.Schema({
  title: String,
  income: Number,
  expense: Number
});

const Entry = mongoose.model('Entry', entrySchema);

const app = express();
app.use(express.json());

// แสดงรายการรับ-รายจ่าย
app.get('/entries', async (req, res) => {
  try {
    const entries = await Entry.find({});
    res.json(entries);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// เพิ่มรายการรับ-รายจ่าย
app.post('/entries', async (req, res) => {
  const entry = new Entry({
    title: req.body.title,
    income: req.body.income,
    expense: req.body.expense
  });
  try {
    const newEntry = await entry.save();
    res.status(201).json(newEntry);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// ลบรายการรับ-รายจ่าย
app.delete('/entries/:id', async (req, res) => {
  try {
    const deletedEntry = await Entry.findByIdAndRemove(req.params.id);
    res.json(deletedEntry);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});